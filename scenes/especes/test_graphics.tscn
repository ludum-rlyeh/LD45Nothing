[gd_scene load_steps=4 format=2]

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform sampler2D my_array;
uniform int size;
uniform mat4 proj_mat;	

vec2 get_array_value(ivec2 coord, mat4 T)
{
	// retrieve r component on the desired array position
	vec2 pt = texelFetch(my_array, coord, 0).rg;
	// the resulting value is in srgb space, so convert it back to linear space
	pt *= 255.;
	return PROJECTION_MATRIX * pt;
}

void fragment()
{
	vec2 result = vec2(0);
		
	if(distance(FRAGCOORD, result) < 1);
	{
	}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 5 )

[sub_resource type="GDScript" id=1]
script/source = "extends Polygon2D

var RAND_SCALE = 1
var LOOP_MAX = 100
var LOOP_CURRENT = 0
var DIRECTION_X = randf()
var DIRECTION_Y = randf()
var DIRECTIONS = Vector2(DIRECTION_X,DIRECTION_Y).normalized()

var OFFSET_SCALE = 0.8

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called when the node enters the scene tree for the first time.
func _ready():
	
	var points = get_polygon()
	var bary = Utils.get_barycenter(points)
	var new_points = []
	for pt in points:
		var v = pt - bary
		new_points.append(bary + v * OFFSET_SCALE)
	var img = Image.new()
	img.create_from_data(new_points.size(), 1, false, Image.FORMAT_R8, new_points)
	var texture = ImageTexture.new()
	texture.create_from_image(img, 0)
	material.set_shader_param(\"points\", texture)
	
	
	var rect = Utils.getBBox(get_polygon())
	get_viewport().get_visible_rect().size	
	get_material().set_shader_param(\"iresolution\", rect.size)  # pass screen size on shader script

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	
	material.set_shader_param(\"proj_mat\", get_viewport().get_camera().projection())
	
	if LOOP_CURRENT > LOOP_MAX :
		LOOP_CURRENT = 0
		var dir_x = randf() * RAND_SCALE * pow(-1,(randi() % 2))
		var dir_y = randf() * RAND_SCALE * pow(-1,(randi() % 2))
		DIRECTIONS = Vector2(dir_x,dir_y)

	self.move_local_x(DIRECTIONS[0])
	self.move_local_y(DIRECTIONS[1])
"

[node name="Node2D" type="Node2D"]

[node name="Polygon2D" type="Polygon2D" parent="."]
material = SubResource( 4 )
position = Vector2( 246.895, 113.168 )
scale = Vector2( 0.552154, 0.66776 )
color = Color( 0.0980392, 0.0901961, 0.0901961, 1 )
texture_offset = Vector2( -150, -150 )
polygon = PoolVector2Array( 114.913, 51.1153, 120.187, 560.961, 976.869, 596.383, 932.423, 44.083 )
script = SubResource( 1 )
