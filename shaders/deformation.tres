[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

float hash(vec2 p) {
  return fract(sin(dot(p * 17.17, vec2(14.91, 67.31))) * 4791.9511);
}

float noise(vec2 x) 
{
  vec2 p = floor(x);
  vec2 f = fract(x);
  f = f * f * (3.0 - 2.0 * f);
  vec2 a = vec2(1.0, 0.0);
  return mix(mix(hash(p + a.yy), hash(p + a.xy), f.x), mix(hash(p + a.yx), hash(p + a.xx), f.x), f.y);
}

float fbm(vec2 x) 
{
  float height = 0.0;
  float amplitude = 0.5;
  float frequency = 3.0;
  for (int i = 0; i < 6; i++){
    height += noise(x * frequency) * amplitude;
    amplitude *= 0.5;
    frequency *= 2.0;
  }
  return height;
}

void vertex()
{
	float t = sin(TIME) + cos(TIME);
//	float height = fbm(VERTEX.xy * 4.0);
//	height = height * 0.5;
	float height = cos(VERTEX.x * 4.0) * sin(VERTEX.y * 4.0);
//	vec2 pt = vec2(height);
	vec2 pt = VERTEX.xy + vec2(height) * t * 20.0;
	VERTEX = (EXTRA_MATRIX * WORLD_MATRIX * vec4(pt, 0.0, 1.0)).xy;
}"

[resource]
shader = SubResource( 3 )
