[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float l_total;
uniform float transparency;

float mapTextureRange(float uvx, float begin, float end, float beginText, float endText)
{
	//0.95, 0.9, 1.0, 0.8, 1.0
	// put the uvs between the range [0, begin - end]
	//0.05
	uvx -= begin;
	// normalize between [0,1]
	//0.5
	uvx /= (end-begin);
	// put the range between [0, endText-beginText]
	// 0.1
	uvx *= (endText - beginText);
	// put the range between [beginText, endText]
	//0.9
	uvx += beginText;
	return uvx;
}

void fragment()
{
	float dist_offset = 100.0;
	float dist_offset2 = dist_offset*2.0;
	
	float range_uv = 0.0;
	
	float offset = 0.0;
	
	vec4 color;
	
//	if(l_total < dist_offset)
//	{
//		offset = 0.1;
//		range_uv = 0.1;
//		color = vec4(0.0,1.0,0.0, 1.0);
//	}
//	else if(l_total < dist_offset2)
//	{
//		offset = 0.05;
//		range_uv = 0.;
//		color = vec4(0.0,1.0,0.0, 1.0);
//	}
	if(l_total > 0.0)
	{
		range_uv = dist_offset / l_total;
		offset = range_uv;		
	
		float begin = offset;
		float end = 1.0 - offset;
		vec2 uv = UV;
		
		if(uv.x <= begin)
		{
			uv.x = mapTextureRange(uv.x, 0.0, begin, 0.0, 0.3);
		}
		else if(uv.x >= end)
		{
			uv.x = mapTextureRange(uv.x, end, 1.0, 0.7, 1.0);
		}
		else
		{
			float range_uv_i = floor(uv.x/range_uv);
			uv.x = mapTextureRange(uv.x, range_uv_i * range_uv, (range_uv_i+1.0) * range_uv, 0.4, 0.6);
		}
		
		vec4 c = texture(TEXTURE, uv);
//		if(uv.y > 0.6 && c.w > 0.1)
//		{
//			c.w = 1.0 - mix(0.3, 1.0, uv.y);
//		}
		if(c.w >= transparency)
		{
			c.w = transparency;
		}
		COLOR = c;
	}
	
}"

[resource]
shader = SubResource( 1 )
shader_param/l_total = null
shader_param/transparency = 0.7
