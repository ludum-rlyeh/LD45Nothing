[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec2 resolution;

// Made by k-mouse (2016-11-23)
// Modified from David Hoskins (2013-07-07) and joltz0r (2013-07-04)

float TAU()
{
	return 6.28318530718;
}
float TILING_FACTOR()
{
	return 0.2;
}
int MAX_ITER()
{
	return 1;
}

float waterHighlight(vec2 p, float time, float foaminess)
{
    vec2 i = vec2(p);
	float c = 0.0;
    float foaminess_factor = mix(1.0, 2.0, foaminess);
	float inten = 0.03 * foaminess_factor;

	for (int n = 0; n < MAX_ITER(); n++) 
	{
		float t = time * 2.0 * (1.0 - (3.5 / float(n+1)));
		i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));
		c += 1.0/length(vec2(p.x / (sin(i.x+t)),p.y / (cos(i.y+t))));
	}
	c = 0.2 + c / (inten * float(MAX_ITER()));
	c =  1.17-pow(c, 1.4);
    c = pow(abs(c), 8.0);
	return c / sqrt(foaminess_factor);
}


void fragment( ) 
{
	float time = TIME * 0.1+23.0;
	vec2 uv = UV/4.0;//FRAGCOORD.xy / resolution.xy;
	vec2 uv_square = vec2(uv.x * resolution.x / resolution.y, uv.y);
    float dist_center = pow(2.0*length(uv - 2.0), 1.0);
    
    float foaminess = smoothstep(0.4, 1.8, dist_center);
    float clearness = 0.1 + 0.9*smoothstep(0.1, 0.2, dist_center);
    
	vec2 p = mod(uv_square*TAU()*TILING_FACTOR(), TAU())-200.0;
    
    float c = waterHighlight(p, time, foaminess);
    
    vec3 water_color = vec3(0.0, 0.0, 0.0);
	vec3 color = vec3(c);
	
	float OFFSET = 0.8;
	
	color = 1.0 - color;
	
	if(color.r > OFFSET && color.g > OFFSET && color.b > OFFSET)
	{
		COLOR = vec4(color, 0.0);
	}
	else
	{
		COLOR = vec4(color, 1.0);
	}
	
//    color  = 1.0 - color;
//	color /= 4.0;
	
//    color = clamp(color + water_color, 0.0, 1.0);
    
//    color = mix(water_color, color, clearness);
	

}"

[resource]
shader = SubResource( 1 )
shader_param/resolution = Vector2( 300, 300 )
